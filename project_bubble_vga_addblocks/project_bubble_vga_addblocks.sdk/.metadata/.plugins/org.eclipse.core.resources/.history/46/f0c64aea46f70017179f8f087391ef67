/*
 * Application for the bubble game
 *
 */

#include <stdio.h>		// Used for printf()
#include "xparameters.h"	// Contains hardware addresses and bit masks
#include "xil_cache.h"		// Cache Drivers
#include "xintc.h"		// Interrupt Drivers
#include "xtmrctr.h"		// Timer Drivers
#include "xtmrctr_l.h" 		// Low-level timer drivers
#include "xil_printf.h" 	// Used for xil_printf()
#include "xgpio.h" 		// LED driver, used for General purpose I/i
#include "xspi.h"
#include "xspi_l.h"
#include "lcd.h"
#include "ADXL362.h"
#include "vga_axi_b.h"

volatile int timerTrigger = 0;
volatile int timerCounter = 0;

volatile char rxData = 0;
volatile char mode = 0;

/**
 * Global co-ordinate values for the bubble
 */
const int BALL_RADIUS = 5;
const int BALL_X_INIT = 20, BALL_Y_INIT = 300 ;
const int SHIFT_DIST = 10, BALL_DROP_DIST = 5;
const int X_MIN = 10, X_MAX = 230, Y_MIN = 10, Y_MAX = 310;
u32 vgaBaseAddress = 0x44A30000;


enum DIRECTION {
	TOP 	= 1,
	BOTTOM	= 2,
	RIGHT	= 3,
	LEFT	= 4,
};

/**
 * Global Stage Data variables
 *
 * (Stage Num, x1,y1,x2,y2)
 */
int STAGE_HAZARDS[5][5] = {
		// Stage: 1
		{1,20,20,30,60},
		{1,80,95,85,120},
		{1,120,180,190,190},
		{1,40,250,140,270},
		{1,200,280,220,300}
		// Stage: 2 Add more with first field as stage number
};

/**
 * Global game volatile state variables
 */
int rx_prev_sign = 20, ry_prev_sign = 30 ;
int ball_x_curr = 0, ball_y_curr = 0 ;
int stage_identifier = 1, stage_reset = 0;


/**
 * Timer interrupt to handle the various timed events
 *
 * 1. Ball drop
 * 2. Stage overall time
 */
void TimerCounterHandler(void *CallBackRef, u8 TmrCtrNumber)
{
	timerTrigger = 100;
	timerCounter++;
	char str[10];
	sprintf(str, "%d S", timerCounter);
	xil_printf(str);

	if(timerCounter >= 99){//Done
		lcdPrint(str, 200, 20);
		timerCounter = 0;
	}else{
		lcdPrint(str, 200, 20);
	}
}


/**
 * Main Logic of the bubble bounce game
 *
 * Initialize the background
 * Kickstart the grand loop
 *
 */
int gamify(){


	int ret = 0 ;

	while(1){
		//Set the stage identifier

		drawHazardground(stage_identifier);
		//Call the bubble game stage flow
		ret = bubbleStageFlow(stage_identifier);
		if(ret == 10){
			for(int k=0; k<10 ; k++){
				//TODO: Delay added for delayed read
				lcdPrint("GAME OVER", 80, 160);
				delay_ms(300);
				lcdPrint("         ", 80, 160);
				delay_ms(10);
			}
			clrScr();
		}
	}

}

/*
 * Draw the background and hazard for a stage
 */
int drawHazardground(int stage_id){

	//Blue background border width 5
	setColor(0,0,255);
	fillRect(0,0,5,320);
	fillRect(0,5,240,0);
	fillRect(235,0,240,320);

	//Set background hazards
	for(int i=0; i<5; i++){
		//STAGE_HAZARDS[i] x1,y1,x2,y2
		if(STAGE_HAZARDS[i][0] == stage_id)
			fillRect(STAGE_HAZARDS[i][1],STAGE_HAZARDS[i][2],
					 STAGE_HAZARDS[i][3],STAGE_HAZARDS[i][4]);
	}

	//Bubble starting point in game: Draw here
	drawBubble(BALL_X_INIT,BALL_Y_INIT,BALL_RADIUS);
}

/*
 * Set the background for stage
 * Run the bubble state machine for game
 */
int bubbleStageFlow(int stage_id){


	//Set Bubble Starting point
	ball_x_curr = BALL_X_INIT;
	ball_y_curr = BALL_Y_INIT;

	//Run the Stage Loop
	int ret = 0;
	for(int h=0;h<200;h++)
	for(int g=0;g<200;g++) {

		struct axisvalues rx,ry;
		//for(int i=0; i<500000 ; i++); //TODO: Delay added for delayed read
		delay_ms(50);
		rx = ADXL362_ReadXNew();
		ry = ADXL362_ReadYNew();
		ret = bubbleStateMachine(stage_id, rx, ry); // Will return fail if something is hit
		//Reset Check
		if(ret == 10 || stage_reset == 10){
			//Clear and Return
			xil_printf("FINISH... %d !!",ret);
			stage_reset = 0;
			return 10;
		}
	}
	return 0;
}

/**
 * Check for crash upon movement
 */
int checkBubbleHazards(int stage_id){
	//Check the stage border
	if(ball_x_curr < X_MIN || ball_x_curr > X_MAX ||
	   ball_y_curr < Y_MIN || ball_y_curr > Y_MAX){
		xil_printf("Found Wall... !!");
		return 10;
	}
	//Check the stage hazards
	for(int i=0; i<5; i++){
		if(STAGE_HAZARDS[i][0] == stage_id){
			if(ball_x_curr >= STAGE_HAZARDS[i][1] && ball_x_curr <= STAGE_HAZARDS[i][3] &&
			   ball_y_curr >= STAGE_HAZARDS[i][2] && ball_y_curr <= STAGE_HAZARDS[i][4]){
				xil_printf("CRASH... OOPS... !!");
				return 10;
			}
		}
	}
	return 0;
}

/**
 * State machine to move the bubble in the universe
 */
int bubbleStateMachine(	int stage_id,
						struct axisvalues rx,
						struct axisvalues ry){
	// Pre-check for the stage boundary/hazard conditions
	if(checkBubbleHazards(stage_id) == 10){
		xil_printf("Found Hazard !!");
		return 10;
	}
	//Based on the value of the ADXL do bounce
	if(rx_prev_sign != rx.sign && rx.thousand > 10){ //
		rx_prev_sign = rx.sign;
		if(rx.sign > 0){//TOP
			lcdPrint("TOP", 40, 60);
			moveCircle(ball_x_curr,ball_y_curr,ball_x_curr,ball_y_curr-SHIFT_DIST,BALL_RADIUS);
			ball_y_curr -= SHIFT_DIST;
			xil_printf("TOP\t %c%d.%3d - (%d,%d)\n\r", (rx.sign == 0)?'+':'-',
					rx.whole, rx.thousand, ball_x_curr,ball_y_curr);
		}
		else {//BOTTOM
			lcdPrint("BOTTOM", 40, 60);
			//moveCircle(ball_x_curr,ball_y_curr,ball_x_curr,ball_y_curr-shift_dist,radius);
			//ball_y_curr += shift_dist;
			xil_printf("BOTTOM\t %c%d.%3d - (%d,%d)\n\r", (rx.sign == 0)?'+':'-',
					rx.whole, rx.thousand, ball_x_curr,ball_y_curr);
		}
	}
	else if(ry_prev_sign != ry.sign && ry.thousand > 10){
		ry_prev_sign = ry.sign;
		if(ry.sign > 0){//RIGHT
			lcdPrint("RIGHT", 40, 80);
			moveCircle(ball_x_curr,ball_y_curr,ball_x_curr+SHIFT_DIST,ball_y_curr,BALL_RADIUS);
			ball_x_curr += SHIFT_DIST;
			xil_printf("RIGHT\t %c%d.%3d - (%d,%d)\n\r", (ry.sign == 0)?'+':'-',
					ry.whole, ry.thousand, ball_x_curr,ball_y_curr);
		}
		else{//LEFT
			lcdPrint("LEFT", 40, 80);
			//moveCircle(ball_x_curr,ball_y_curr,ball_x_curr-shift_dist,ball_y_curr,radius);
			//ball_x_curr -= shift_dist;
			xil_printf("LEFT\t %c%d.%3d - (%d,%d)\n\r", (ry.sign == 0)?'+':'-',
					ry.whole, ry.thousand, ball_x_curr,ball_y_curr);

		}
	}
	return 0;
}



/*
 * Draw a colored bubble
 */
int drawBubble(int xc, int yc, int radius){
	drawCircleColor(xc,yc,radius,1,255);
}

/*
 * Draw a circle with the following parameters
 *
 * coordinate xc, yc
 * radius 'r'
 * color R,G,B,Back/White
 * intensity of color 0-255
 *
 */
int drawCircleColor(int xc, int yc, int radius, int color, int intensity){
	int i=0,j=0;
	for(i = (xc-radius); i <= (xc+radius); i++){
		for(j = (yc-radius); j <= (yc+radius); j++){
			if(((i-xc)*(i-xc) + (j-yc)*(j-yc)) <= radius*radius){
				if(color == 1) 	    // Red
					setColor(intensity,0,0);
				else if(color == 2)  //Green
					setColor(0,intensity,0);
				else if(color == 3)  //Blue
					setColor(0,0,intensity);
				else if(color == 0)  //Black
					setColor(0,0,0);
				else if(color >= 10) //White
					setColor(intensity,intensity,intensity);
				//Color the bubble
				fillRect(i,j,i+2,j+2);
			}
		}
	}
}

/*
 * Move circle from centre to a target coordinate
 * X(Start) -> X(Middle) -> X(Final)
 */
int moveCircle(int xc, int yc, int xt, int yt, int radius){
	// Erase the circle
	drawCircleColor(xc,yc,radius,0,255);
	// Draw the middle step
	drawCircleColor((xc+xt)/2,(yc+yt)/2,radius,1,255);
	drawCircleColor((xc+xt)/2,(yc+yt)/2,radius,0,255);
	// Draw the final step
	drawCircleColor(xt,yt,radius,1,255);
}

/************************** Constant Definitions ***************************/
#define READ_WRITE_MUL_FACTOR 0x100

/************************** Function Definitions ***************************/
/**
 *
 * Run a self-test on the driver/device. Note this may be a destructive test if
 * resets of the device are performed.
 *
 * If the hardware system is not built correctly, this function may never
 * return to the caller.
 *
 * @param   baseaddr_p is the base address of the VGA_AXI_Binstance to be worked on.
 *
 * @return
 *
 *    - XST_SUCCESS   if all self-test code passed
 *    - XST_FAILURE   if any self-test code failed
 *
 * @note    Caching must be turned off for this function to work.
 * @note    Self test may fail if data memory and device are not on the same bus.
 *
 */
XStatus VGA_AXI_B_Reg_SelfTest(void * baseaddr_p)
{
	u32 baseaddr;
	int write_loop_index;
	int read_loop_index;
	int Index;

	baseaddr = (u32) baseaddr_p;

	xil_printf("******************************\n\r");
	xil_printf("* User Peripheral Self Test\n\r");
	xil_printf("******************************\n\n\r");

	/*
	 * Write to user logic slave module register(s) and read back
	 */
	xil_printf("User logic slave module test...\n\r");

	for (write_loop_index = 0 ; write_loop_index < 4; write_loop_index++)
	  VGA_AXI_B_mWriteReg (baseaddr, write_loop_index*4, (write_loop_index+1)*READ_WRITE_MUL_FACTOR);
	for (read_loop_index = 0 ; read_loop_index < 4; read_loop_index++)
	  if ( VGA_AXI_B_mReadReg (baseaddr, read_loop_index*4) != (read_loop_index+1)*READ_WRITE_MUL_FACTOR){
	    xil_printf ("Error reading register value at address %x\n", (int)baseaddr + read_loop_index*4);
	    return XST_FAILURE;
	  }

	xil_printf("   - slave register write/read passed\n\n\r");

	return XST_SUCCESS;
}

u32 readMonitorStatus(){
	return Xil_In32((0x44A30000) + (124)); //VGA_AXI_B_S00_VGA_AXI_SLV_REG31_OFFSET
}

int displayTest(){

	Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG0_OFFSET), (u32)(400));
	//VGA_AXI_B_mWriteReg(0x44A30000, VGA_AXI_B_S00_VGA_AXI_SLV_REG1_OFFSET, 0x200);
	Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG1_OFFSET), (u32)(400));

	int x =200, y=200;
	int status = readMonitorStatus();
	xil_printf(" status first %d\n\r",status);
	int waitCount = 0;
	while(readMonitorStatus() > 0 && waitCount<100){
		status = readMonitorStatus();
		xil_printf(" status first %d\n\r",status);
		//VGA Display test code XPAR_VGA_AXI_0_BASEADDR
		//VGA_AXI_B_Reg_SelfTest((uint32_t*)0x44A30000);
		//VGA_AXI_B_mWriteReg(0x44A30000, VGA_AXI_B_S00_VGA_AXI_SLV_REG0_OFFSET, 0x200);
		Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG0_OFFSET), (u32)(x));
		//VGA_AXI_B_mWriteReg(0x44A30000, VGA_AXI_B_S00_VGA_AXI_SLV_REG1_OFFSET, 0x200);
		Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG1_OFFSET), (u32)(y));
		waitCount++;
	}
	xil_printf("Closing %d\n\r",status);
}

int main()
{
	static XIntc intc;
	static XTmrCtr axiTimer;
	static XGpio dc;
	static XSpi spi;

	XSpi_Config *spiConfig;	/* Pointer to Configuration data */

	u32 status;
	u32 controlReg;

	int sec = 0;
	int secTmp;
	char secStr[4];

	Xil_ICacheEnable();
	Xil_DCacheEnable();
	print("---Entering main (CK)---\n\r");

	status = XTmrCtr_Initialize(&axiTimer, XPAR_AXI_TIMER_0_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("Initialize timer fail!\n");
		return XST_FAILURE;
	}

	status = XIntc_Initialize(&intc, XPAR_INTC_0_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("Initialize interrupt controller fail!\n");
		return XST_FAILURE;
	}

	status = XIntc_Connect(&intc,
				XPAR_MICROBLAZE_0_AXI_INTC_AXI_TIMER_0_INTERRUPT_INTR,
				(XInterruptHandler)XTmrCtr_InterruptHandler,
				(void *)&axiTimer);
	if (status != XST_SUCCESS) {
		xil_printf("Connect IHR fail!\n");
		return XST_FAILURE;
	}

	status = XIntc_Start(&intc, XIN_REAL_MODE);
	if (status != XST_SUCCESS) {
		xil_printf("Start interrupt controller fail!\n");
		return XST_FAILURE;
	}

	// Enable interrupt
	XIntc_Enable(&intc, XPAR_MICROBLAZE_0_AXI_INTC_AXI_TIMER_0_INTERRUPT_INTR);
	microblaze_enable_interrupts();

	/*
	 * Setup the handler for the timer counter that will be called from the
	 * interrupt context when the timer expires, specify a pointer to the
	 * timer counter driver instance as the callback reference so the handler
	 * is able to access the instance data
	 */
	XTmrCtr_SetHandler(&axiTimer, TimerCounterHandler, &axiTimer);

	/*
	 * Enable the interrupt of the timer counter so interrupts will occur
	 * and use auto reload mode such that the timer counter will reload
	 * itself automatically and continue repeatedly, without this option
	 * it would expire once only
	 */
	XTmrCtr_SetOptions(&axiTimer, 0,
				XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);

	/*
	 * Set a reset value for the timer counter such that it will expire
	 * eariler than letting it roll over from 0, the reset value is loaded
	 * into the timer counter when it is started
	 */
	XTmrCtr_SetResetValue(&axiTimer, 0, 0x26250); //0xFFFF0000
	//#define RESET_VALUE                    0xF4240
	// 0x2625A0 //0x7A120 //0x4C4B40 //0x5D3E //0x861C4680 //0xC00 //0x10000

	/*
	 * Start the timer counter such that it's incrementing by default,
	 * then wait for it to timeout a number of times
	 */
	XTmrCtr_Start(&axiTimer, 0);
	xil_printf("Timer start!\n");
	/*
	 * Initialize the GPIO driver so that it's ready to use,
	 * specify the device ID that is generated in xparameters.h
	 */
	status = XGpio_Initialize(&dc, XPAR_SPI_DC_DEVICE_ID);
	if (status != XST_SUCCESS)  {
		xil_printf("Initialize GPIO dc fail!\n");
		return XST_FAILURE;
	}
	/*
	 * Set the direction for all signals to be outputs
	 */
	XGpio_SetDataDirection(&dc, 1, 0x0);
	/*
	 * Initialize the SPI driver so that it is  ready to use.
	 */
	spiConfig = XSpi_LookupConfig(XPAR_SPI_DEVICE_ID);
	if (spiConfig == NULL) {
		xil_printf("Can't find spi device!\n");
		return XST_DEVICE_NOT_FOUND;
	}
	status = XSpi_CfgInitialize(&spi, spiConfig, spiConfig->BaseAddress);
	if (status != XST_SUCCESS) {
		xil_printf("Initialize spi fail!\n");
		return XST_FAILURE;
	}
	/*
	 * Reset the SPI device to leave it in a known good state.
	 */
	XSpi_Reset(&spi);
	/*
	 * Setup the control register to enable master mode
	 */
	controlReg = XSpi_GetControlReg(&spi);
	XSpi_SetControlReg(&spi,
			(controlReg | XSP_CR_ENABLE_MASK | XSP_CR_MASTER_MODE_MASK) &
			(~XSP_CR_TRANS_INHIBIT_MASK));

	// Select 1st slave device
	XSpi_SetSlaveSelectReg(&spi, ~0x01);
	SPI_Init(SPI_BASEADDR, 0, 0, 0);

	ADXL362_WriteReg(ADXL362_SOFT_RESET, ADXL362_RESET_CMD);
	delay_ms(10);
	ADXL362_WriteReg(ADXL362_SOFT_RESET, 0x00);
	// Enable Measurement
	ADXL362_WriteReg(ADXL362_POWER_CTL, (2 << ADXL362_MEASURE));
	initLCD();
	clrScr();



	//VGA TEst code
	displayTest();

	// Initialize the game logic
	gamify();


	/*
		int xaxis=120,yaxis=160,xaxis_new=120,yaxis_new=160;
		int h;
		struct axisvalues rx,ry;
		for(h=0;h<200;h++){
			setColor(0,0,0);
			fillRect(xaxis-4,yaxis-4,xaxis+4,yaxis+4);
			setColor(255,255,255);
			fillRect(xaxis_new-4,yaxis_new-4,xaxis_new+4,yaxis_new+4);
			xaxis=xaxis_new;
			yaxis=yaxis_new;
			int i,j,k;
			for(i=0;i<6535;i++)
				for(j=0;j<200;j++)
					k=j;
			rx=ADXL362_ReadXNew();
			ry=ADXL362_ReadYNew();
			//xil_printf("Rx: T = %d\tS = %d\tW = %d\tRy: T = %d\tS = %d\tW = %d\n",rx.thousand,rx.sign,rx.whole,ry.thousand,ry.sign,ry.whole);
			//xil_printf("Value ry.thousands=%d\n",ry.thousand);
			//xil_printf("Value rx.sign=%c\n",rx.sign);
			//xil_printf("Value ry.sign=%c\n",ry.sign);
			//xil_printf("Value rx.whole=%d\n",rx.whole);
			//xil_printf("Value ry.whole=%d\n",ry.whole);
			if(rx.sign==0){
				if(rx.thousand>40)
				{
				xaxis_new=(xaxis_new+8)%225;
				if(xaxis_new<0)
					xaxis_new=240+xaxis_new;
				//xil_printf("DOWN");
				}
				//xil_printf("Value rx.sign>0=%d\n",rx.sign);
			}
				//lcdPrint("FRONT", 40, 60);
			else{
				if(rx.thousand>40)
				{
				xaxis_new=(xaxis_new-8)%225;
				//xaxis_new=(xaxis_new-(int)((rx.thousand-40)/8))%225;
				if(xaxis_new<0)
					xaxis_new=240+xaxis_new;
				//xil_printf("UP");
				}
			    //xil_printf("Value rx.sign<0=%d\n",rx.sign);
			}
				//lcdPrint("BACK", 40, 60);

			if(ry.sign==0){
				if(ry.thousand>40)
				{
					//xil_printf("LEFT");
				yaxis_new=(yaxis_new+8)%305;
				if(yaxis_new<0)
					yaxis_new=320+yaxis_new;
				}
			    //xil_printf("Value ry.sign>0=%d\n",ry.sign);
			}
				//lcdPrint("RIGHT", 40, 80);
			else{
				if(ry.thousand>40)
				{
					//xil_printf("RIGHT");
				yaxis_new=(yaxis_new-8)%305;
				if(yaxis_new<0)
					yaxis_new=320+yaxis_new;
				}
			    //xil_printf("Value ry.sign<0=%d\n",ry.sign);
			}
				//lcdPrint("LEFT", 40, 80);
			xil_printf("%d,%d\n",xaxis_new,yaxis_new);
		   }
	*/

	xil_printf("End\n");
	return 0;
}
