/*
 * vga_viz.c
 *
 *  Created on: Jan 11, 2018
 *      Author: Karma
 */
#include "vga_viz.h"


/** Global Variables **/
u32 vgaBaseAddress = 0x44A30000;


/*
 *
 */
u32 readMonitorStatus(){
	return Xil_In32((0x44A30000) + (124)); //VGA_AXI_B_S00_VGA_AXI_SLV_REG31_OFFSET
}

/**
 * Draw Ball at x, y
 * erase = 1 to paint background
 */
int drawBall(int x, int y, int erase){
	int status = 0, waitCount = 0;
	while(readMonitorStatus() > 0 && waitCount<10){
		status = readMonitorStatus();
		xil_printf(" status first %d\n\r",status);
		Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG0_OFFSET), (u32)(x));
		Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG1_OFFSET), (u32)(y));
		Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG2_OFFSET), (u32)(erase));
		waitCount++;
	}
}

/*
 * Move from x1,y1 to x2,y2
 */
int moveBall(int x1, int y1, int x2, int y2){
	//Erase
	drawBall(x1, y1,0);
	//then draw midway
	drawBall((x1+x2)/2, (y1+y2)/2,1);
	delay_ms(150);
	//erase
	drawBall((x1+x2)/2, (y1+y2)/2,0);
	delay_ms(150);
	//then draw final
	drawBall(x2, y2,1);
}

/*
 * Test Code
 */
int displayTest(){

	Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG0_OFFSET), (u32)(400));
	Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG1_OFFSET), (u32)(400));

	int x =200, y=200;
	int status = readMonitorStatus();
	xil_printf(" status first %d\n\r",status);
	int waitCount = 0;
	while(readMonitorStatus() > 0 && waitCount<10){
		status = readMonitorStatus();
		xil_printf(" status first %d\n\r",status);
		//VGA Display test code XPAR_VGA_AXI_0_BASEADDR
		//VGA_AXI_B_Reg_SelfTest((uint32_t*)0x44A30000);
		//VGA_AXI_B_mWriteReg(0x44A30000, VGA_AXI_B_S00_VGA_AXI_SLV_REG0_OFFSET, 0x200);
		Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG0_OFFSET), (u32)(x));
		//VGA_AXI_B_mWriteReg(0x44A30000, VGA_AXI_B_S00_VGA_AXI_SLV_REG1_OFFSET, 0x200);
		Xil_Out32((vgaBaseAddress) + (VGA_AXI_B_S00_VGA_AXI_SLV_REG1_OFFSET), (u32)(y));
		waitCount++;
	}

	 moveBall(200,200,350,350);
	 delay_ms(150);
	 moveBall(350,350,400,200);
	 delay_ms(150);
	 moveBall(400,200,400,400);

	 // On and off ball
	 drawBall(300, 300,1);
	 xil_printf(" On %d\n\r",status);
	 delay_ms(150);
	 drawBall(300, 300,0);
	 xil_printf(" Off %d\n\r",status);
	 delay_ms(150);
	 drawBall(300, 300,1);

	xil_printf("Closing %d\n\r",status);
}
